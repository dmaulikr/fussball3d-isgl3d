////  Ball.h//  Fussball3d////  Created by Roger Engelbert on 10/29/12.//  Copyright 2012 DoneWithComputers. All rights reserved.//#import "Ball.h"@implementation Ball@synthesize radius = _radius, squaredRadius = _squaredRadius;-(void) dealloc {	[super dealloc];}-(id) initWithView:(Fussball3d *) view {	self = [super initWithView:view];		if (self != nil) {		_radius = 24;		_squaredRadius = _radius * _radius;		_ricochet = -0.8f;		_bounce = 0.2f;		_friction = 0.99f;		_gravity = 5.0f;				_max_velocity = 12;				//create skin		Isgl3dTextureMaterial * material = [Isgl3dTextureMaterial materialWithTextureFile:@"ball.png" shininess:0 precision:Isgl3dTexturePrecisionMedium repeatX:NO repeatY:NO];		Isgl3dGLMesh * geometry = [Isgl3dSphere meshWithGeometry:_radius longs:64 lats:64];		Isgl3dMeshNode * sphere = [[[Isgl3dMeshNode alloc] initWithMesh:geometry andMaterial:material] autorelease];		[_skin addChild:sphere];		_skin.y = _radius;				_nextX = _x = _radius;		_nextY = _y = _view.screenHeight * 0.5f;		        _bounceVy = 0.0;		_bounceY = 0.0;				_vx = 4;		_vy = 4;				[self place];			}		return self;}-(void) bounceWithForce:(float) force {	_bounceVy += force * 0.002f;}-(void) place  {		[super place];		_skin.x = _x - _view.screenWidth * 0.5f;	_skin.y = _bounceY;	_skin.z = _view.screenHeight * 0.5f - _y;}-(void) update:(float) dt {		//weird rotation logic, should use quaternions	_skin.rotationX -= _vx;	_skin.rotationZ -= _vy;		_vx *= _friction;	_vy *= _friction;		if (_vx > _max_velocity) _vx = _max_velocity;	if (_vx < -_max_velocity) _vx = -_max_velocity;	if (_vy > _max_velocity) _vy = _max_velocity;	if (_vy < -_max_velocity) _vy = -_max_velocity;		_nextX += _vx;	_nextY += _vy;		//check collision with sides	if (_nextX > _view.screenWidth - _radius) {		_nextX = _view.screenWidth - _radius;		_vx *= _ricochet;		[self bounceWithForce:[self mag2d]];	}		if (_nextX < _radius) {		_nextX = _radius;		_vx *= _ricochet;		[self bounceWithForce:[self mag2d]];	}		if (_nextY < _radius) {				_nextY = _radius;		_vy *= _ricochet;		[self bounceWithForce:[self mag2d]];	}		if (_nextY > _view.screenHeight - _radius) {			_nextY = _view.screenHeight - _radius;		_vy *= _ricochet;		[self bounceWithForce:[self mag2d]];	}		_bounceVy -= _gravity;	_bounceY += _bounceVy;		if (_bounceY < _radius) {		_bounceY = _radius;		_bounceVy *= -0.5f;	}}@end