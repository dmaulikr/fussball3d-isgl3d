////  Fussball3d.m//  Fussball3d////  Created by Roger Engelbert on 10/29/12.//  Copyright 2012 DoneWithComputers. All rights reserved.//#import "Fussball3d.h"#import "PlayerBar.h"#import "Player.h"#import "Ball.h"@implementation Fussball3d@synthesize screenWidth = _screenWidth, screenHeight = _screenHeight, container = _container;-(void) dealloc {		[_container release];	[_ball release];	[_bars removeAllObjects];	[_bars release];	_bars  = nil;	    [_nodeTapGestureRecognizer release];    _nodeTapGestureRecognizer = nil;    [_pinchGestureRecognizer release];    _pinchGestureRecognizer = nil;    [_rotationGestureRecognizer release];    _rotationGestureRecognizer = nil;    	[super dealloc];}- (id) init {	self = [super init];		if (self != nil) {			// position the camera.		[self.camera setPosition:iv3(0, 0, 1230)];		[self.camera lookAt:0 y:0 z:0];				_container = [[self.scene createNode] retain];		_container.rotationX = 90;				_bars = [[NSMutableArray array] retain];		CGRect screen = [Isgl3dDirector sharedInstance].windowRect;		_screenWidth = screen.size.width;		_screenHeight = screen.size.height;				//distance from goal keeper to TOP/BOTTOM		float margin = _screenHeight * 0.08;		//distance between bars		float bar_gap = (_screenHeight - 2 * margin)/7;						[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_1 numPlayers:1 atY:margin] autorelease]];		[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_1 numPlayers:2 atY:margin + bar_gap] autorelease]];		[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_2 numPlayers:3 atY:margin + bar_gap * 2] autorelease]];		[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_1 numPlayers:4 atY:margin + bar_gap * 3] autorelease]];		[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_2 numPlayers:4 atY:margin + bar_gap * 4] autorelease]];		[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_1 numPlayers:3 atY:margin + bar_gap * 5] autorelease]];		[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_2 numPlayers:2 atY:margin + bar_gap * 6] autorelease]];		[_bars addObject:[[[PlayerBar alloc] initWithView:self withTeam:TEAM_2 numPlayers:1 atY:_screenHeight - margin] autorelease]];										_ball = [[[Ball alloc] initWithView:self] retain];		[_container addChild:_ball.skin];				Isgl3dGLMesh * geometry;		Isgl3dTextureMaterial * material;		Isgl3dMeshNode * node;				//bar geometry (here I created bars with planes instead of cylinders)		geometry = [[[Isgl3dPlane alloc] initWithGeometry:_screenWidth height:16 nx:2 ny:2] autorelease];		    		int len = _bars.count;		PlayerBar * bar;		Isgl3dColorMaterial * colorMaterial;		for (int i = 0; i < len; i++) {			bar = [_bars objectAtIndex:i];			[_container addChild:bar.skin];			colorMaterial = [Isgl3dColorMaterial materialWithHexColors:[bar barColor] diffuse:[bar barColor] specular:[bar barColor] shininess:0.0];			node = [[[Isgl3dMeshNode alloc] initWithMesh:geometry andMaterial:colorMaterial] autorelease];			node.y = [Player playerLength];			node.z = _screenHeight * 0.5 - bar.y;			node.rotationX = -90;			[_container addChild:node];		}				//field plane (grass)		material = [Isgl3dTextureMaterial materialWithTextureFile:@"field.png" shininess:0 precision:Isgl3dTexturePrecisionMedium repeatX:NO repeatY:NO];		geometry = [[[Isgl3dPlane alloc] initWithGeometry:_screenWidth height:_screenHeight nx:2 ny:2] autorelease];		node = [[[Isgl3dMeshNode alloc] initWithMesh:geometry andMaterial:material] autorelease];		node.rotationX = -90;		node.y = -2;		[_container addChild:node];		         //add screen touch event		[[Isgl3dTouchScreen sharedInstance] addResponder:self];				//block gestures  		_sceneTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(sceneTap:)];        _sceneTapGestureRecognizer.delegate = self;        [[Isgl3dDirector sharedInstance] addGestureRecognizer:_sceneTapGestureRecognizer forNode:nil];        _nodeTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(nodeTap:)];        _nodeTapGestureRecognizer.delegate = self;        _pinchGestureRecognizer = [[UIPinchGestureRecognizer alloc] initWithTarget:self action:@selector(pinchGesture:)];        _pinchGestureRecognizer.delegate = self;        _rotationGestureRecognizer = [[UIRotationGestureRecognizer alloc] initWithTarget:self action:@selector(rotationGesture:)];        _rotationGestureRecognizer.delegate = self;                        		[self schedule:@selector(tick:)];        	}		return self;}- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {        NSEnumerator * enumerator = [touches objectEnumerator];    UITouch * touch;    CGPoint	location;        int len = _bars.count;    PlayerBar * bar;    while (touch = [enumerator nextObject]) {        location = [touch locationInView:touch.view];        location.y = _screenHeight - location.y;        //track player bars        for (int i = 0; i < len; i++ ) {            bar = [_bars objectAtIndex:i];            if (!bar.selected) {                if (fabs(bar.y - location.y) < PLAYER_DEPTH * 2) {                    bar.selected = YES;                    bar.touch = touch;                    [bar processTouchDown:location];                }            } else {                //clear touches on bar if pressing down on a still selected bar                bar.touch = nil;                bar.selected = NO;            }        }    }    }- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {	    NSEnumerator * enumerator = [touches objectEnumerator];    UITouch * touch;    CGPoint	location;        int len = _bars.count;    PlayerBar * bar;        while (touch = [enumerator nextObject]) {        location = [touch locationInView:touch.view];        location.y = _screenHeight - location.y;                //track player bars        for (int i = 0; i < len; i++ ) {            bar = [_bars objectAtIndex:i];            if (bar.selected && bar.touch && bar.touch == touch) {                bar.selected = NO;                bar.touch = nil;                [bar processTouchUp:location];                            }        }    }}- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {        NSEnumerator * enumerator = [touches objectEnumerator];    UITouch * touch;    CGPoint	location;        int len = _bars.count;    PlayerBar * bar;    while (touch = [enumerator nextObject]) {        location = [touch locationInView:touch.view];        location.y = _screenHeight - location.y;        //track player bars        for (int i = 0; i < len; i++ ) {            bar = [_bars objectAtIndex:i];            if (bar.selected && bar.touch && bar.touch == touch) {                [bar processTouchMove:location];            }        }    }}- (void) tick:(float)dt {	    	[_ball update:dt];				int len = _bars.count;	PlayerBar *bar;	for (int i = 0; i < len; i++ ) {		bar = [_bars objectAtIndex:i];		[bar update:dt];		[bar collideWithBall:_ball];		[bar place];	}		[_ball place];	 }- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {        return NO;}- (void)sceneTap:(UITapGestureRecognizer *)gestureRecognizer {}- (void)nodeTap:(UITapGestureRecognizer *)gestureRecognizer {}- (void)pinchGesture:(UIPinchGestureRecognizer *)gestureRecognizer {}- (void)rotationGesture:(UIRotationGestureRecognizer *)gestureRecognizer {}	@end